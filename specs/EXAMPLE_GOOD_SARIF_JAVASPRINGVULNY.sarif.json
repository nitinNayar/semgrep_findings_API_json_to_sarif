{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line .github/workflows/hawkscan.yml:12:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected"}},{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line .github/workflows/hawkscan.yml:14:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected"}},{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line .github/workflows/hawkscan.yml:16:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected"}},{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line .github/workflows/hawkscan.yml:20:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected"}},{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line gradlew:177:\n `for i` was unexpected"}}]}],"results":[{"fingerprints":{"matchBasedId/v1":"de8bd61ef656cf69a12ac69ffbf39a70b9941c6bd45bf21913d15b7a9307afa95ba3cc4592d769593d32c61ce6b9a762e68c883d9ded0578f657a1b9f1d717db_0"},"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"Dockerfile"},"replacements":[{"deletedRegion":{"endColumn":99,"endLine":17,"startColumn":1,"startLine":17},"insertedContent":{"text":"USER non-root\nCMD [\"java\", \"-Djava.security.egd=file:/dev/./urandom\", \"-jar\", \"/app/java-spring-vuly-0.2.0.jar\"]"}}]}],"description":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n Autofix: Semgrep rule suggested fix"}}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Dockerfile","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":17,"snippet":{"text":"CMD [\"java\", \"-Djava.security.egd=file:/dev/./urandom\", \"-jar\", \"/app/java-spring-vuly-0.2.0.jar\"]"},"startColumn":1,"startLine":17}}}],"message":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"properties":{},"ruleId":"dockerfile.security.missing-user.missing-user"},{"fingerprints":{"matchBasedId/v1":"0b3b792daab2dc62fd32d3312b5f93adeaaf3cc56f473f8ee518dbf61d96ade648a3e2d21315c12e5e60c401facd36ad19f9c2d5785bd72732b6b486aa7254be_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml","uriBaseId":"%SRCROOT%"},"region":{"endColumn":5,"endLine":3,"snippet":{"text":"  db:"},"startColumn":3,"startLine":3}}}],"message":{"text":"Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"properties":{},"ruleId":"yaml.docker-compose.security.no-new-privileges.no-new-privileges"},{"fingerprints":{"matchBasedId/v1":"a4c9a5b5da893201bcf0908973bfd478af5ce99508d5c1313c871a7cd96bf620cc2c844d70e6da41d1f6e470eed9006460a3c74048353a89477dec781d9b1505_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml","uriBaseId":"%SRCROOT%"},"region":{"endColumn":5,"endLine":3,"snippet":{"text":"  db:"},"startColumn":3,"startLine":3}}}],"message":{"text":"Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"properties":{},"ruleId":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service"},{"fingerprints":{"matchBasedId/v1":"c205669c90cadcc099a5f1ade89d9b8cf413df130c0440284807554436ceeba85c1d7bc8d87a55a113ca4e5539715281ed92ef3709c871a65b91a216e2cbfd32_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml","uriBaseId":"%SRCROOT%"},"region":{"endColumn":12,"endLine":12,"snippet":{"text":"  javavulny:"},"startColumn":3,"startLine":12}}}],"message":{"text":"Service 'javavulny' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"properties":{},"ruleId":"yaml.docker-compose.security.no-new-privileges.no-new-privileges"},{"fingerprints":{"matchBasedId/v1":"554c45717e6622ca8eaec1d789701653d658cbbe2057e19cb1882e2674e858ea79636ea02affc1616848322aebb07a4c2fe98a2d0f324afcaa934f56360f015e_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml","uriBaseId":"%SRCROOT%"},"region":{"endColumn":12,"endLine":12,"snippet":{"text":"  javavulny:"},"startColumn":3,"startLine":12}}}],"message":{"text":"Service 'javavulny' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"properties":{},"ruleId":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:7 to src/main/java/active-debug.java:10"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'e.getStackTrace()' @ 'src/main/java/active-debug.java:7'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":37,"endLine":7,"message":{"text":"Source: 'e.getStackTrace()' @ 'src/main/java/active-debug.java:7'"},"snippet":{"text":"e.getStackTrace()"},"startColumn":20,"startLine":7}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:7'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":17,"endLine":7,"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:7'"},"snippet":{"text":"elements"},"startColumn":9,"startLine":7}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:10'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":35,"endLine":10,"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:10'"},"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":10}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"085573c37f3d3406ddb4be2d92e5407039ceabb1c82eb795eb05e43251e95092b42a50c27a5f28a4782eabd6993e0494bdfa5d689f2a2c7bcf39a9f74639956b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":10,"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":10}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:16 to src/main/java/active-debug.java:19"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'Thread.currentThread().getStackTrace()' @ 'src/main/java/active-debug.java:16'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":58,"endLine":16,"message":{"text":"Source: 'Thread.currentThread().getStackTrace()' @ 'src/main/java/active-debug.java:16'"},"snippet":{"text":"Thread.currentThread().getStackTrace()"},"startColumn":20,"startLine":16}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:16'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":17,"endLine":16,"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:16'"},"snippet":{"text":"elements"},"startColumn":9,"startLine":16}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:19'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":35,"endLine":19,"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:19'"},"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":19}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"5f78ccf66b32bffdc59aa1b210dec5b5960300852fb852f59f3dc8da0624b7a73f02f1794f19c0a57261aa343f775fe21b7a61042c630710a9c03419020ca5b8_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":19,"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":19}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:25 to src/main/java/active-debug.java:28"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'new Throwable().getStackTrace()' @ 'src/main/java/active-debug.java:25'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":51,"endLine":25,"message":{"text":"Source: 'new Throwable().getStackTrace()' @ 'src/main/java/active-debug.java:25'"},"snippet":{"text":"new Throwable().getStackTrace()"},"startColumn":20,"startLine":25}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:25'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":17,"endLine":25,"message":{"text":"Propagator : 'elements' @ 'src/main/java/active-debug.java:25'"},"snippet":{"text":"elements"},"startColumn":9,"startLine":25}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:28'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":35,"endLine":28,"message":{"text":"Sink: 'System.err.print(elements);' @ 'src/main/java/active-debug.java:28'"},"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":28}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"fccb2ff1b32a31566a6f4bc4011279ec81020e995f140cb3cb8f57c4cc5a044cc2b6a19927cb05830f07687b7be304049746078ed667fa4537c4a8135d2d3c8b_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":35,"endLine":28,"snippet":{"text":"        System.err.print(elements);"},"startColumn":9,"startLine":28}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:33 to src/main/java/active-debug.java:33"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e)' @ 'src/main/java/active-debug.java:33'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":94,"endLine":33,"message":{"text":"Source: 'org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e)' @ 'src/main/java/active-debug.java:33'"},"snippet":{"text":"org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e)"},"startColumn":28,"startLine":33}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e));' @ 'src/main/java/active-debug.java:33'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":95,"endLine":33,"message":{"text":"Sink: 'System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e));' @ 'src/main/java/active-debug.java:33'"},"snippet":{"text":"        System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e));"},"startColumn":9,"startLine":33}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"64ccf65d82673ae43b276c0a099342ccdfb037cbf800b39a4c7407f784914dacf43a137444d721369cdd18a125f9379c8be1087e60ad1198722decea4dcfdb59_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":33,"snippet":{"text":"        System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(e));"},"startColumn":9,"startLine":33}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:35 to src/main/java/active-debug.java:35"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e)' @ 'src/main/java/active-debug.java:35'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":98,"endLine":35,"message":{"text":"Source: 'org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e)' @ 'src/main/java/active-debug.java:35'"},"snippet":{"text":"org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e)"},"startColumn":28,"startLine":35}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e));' @ 'src/main/java/active-debug.java:35'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":99,"endLine":35,"message":{"text":"Sink: 'System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e));' @ 'src/main/java/active-debug.java:35'"},"snippet":{"text":"        System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e));"},"startColumn":9,"startLine":35}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"65bf7a19e309eeda0abcd0393a972b989aa2361f9a9b7551dde76438728a4d0b9b5a2e75f0303f207cea7dad49beb14028696258154df3ba8a9e5974ffaab994_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":35,"snippet":{"text":"        System.out.println(org.apache.commons.lang3.exception.ExceptionUtils.getFullStackTrace(e));"},"startColumn":9,"startLine":35}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/active-debug.java:39 to src/main/java/active-debug.java:41"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'Thread.currentThread().getStackTrace()' @ 'src/main/java/active-debug.java:39'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":76,"endLine":39,"message":{"text":"Source: 'Thread.currentThread().getStackTrace()' @ 'src/main/java/active-debug.java:39'"},"snippet":{"text":"Thread.currentThread().getStackTrace()"},"startColumn":38,"startLine":39}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'ste' @ 'src/main/java/active-debug.java:39'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":35,"endLine":39,"message":{"text":"Propagator : 'ste' @ 'src/main/java/active-debug.java:39'"},"snippet":{"text":"ste"},"startColumn":32,"startLine":39}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'ste' @ 'src/main/java/active-debug.java:39'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":35,"endLine":39,"message":{"text":"Propagator : 'ste' @ 'src/main/java/active-debug.java:39'"},"snippet":{"text":"ste"},"startColumn":32,"startLine":39}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.out.println(ste);' @ 'src/main/java/active-debug.java:41'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java"},"region":{"endColumn":36,"endLine":41,"message":{"text":"Sink: 'System.out.println(ste);' @ 'src/main/java/active-debug.java:41'"},"snippet":{"text":"            System.out.println(ste);"},"startColumn":13,"startLine":41}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"a2680ecf9c997c2ccc369007bf4d7378df76bfccc991da636c21f59a0eff17ae9518c64cca888e2a67ad1c6df947998e21dda547db1349c09c134521132cd058_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/active-debug.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":41,"snippet":{"text":"            System.out.println(ste);"},"startColumn":13,"startLine":41}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"},{"fingerprints":{"matchBasedId/v1":"e514a05b734bec29a96dc7f2063214cc0af9b5cb4bafc65332eac0e5c668b62c227aeecad82b8a81c36addb97a3f574fb085ec6c3db1eecaacfbbd779518743c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/MultiHttpSecurityConfig.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":50,"snippet":{"text":"            http\n                    .antMatcher(\"/api/jwt/**\")\n                        .httpBasic().disable()\n                        .csrf().disable()"},"startColumn":13,"startLine":47}}}],"message":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"properties":{},"ruleId":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"},{"fingerprints":{"matchBasedId/v1":"403b601c1cf2f664993a51a6025dd7c5f88ab55eb825b37550ee1e9000702f56887e2a18dc954403537c8badca9f45c5eb5606e0737b558f9608232fa0899ee0_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/MultiHttpSecurityConfig.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":91,"snippet":{"text":"            http\n                    .antMatcher(\"/api/token/**\")\n                    .httpBasic().disable()\n                    .csrf().disable()"},"startColumn":13,"startLine":88}}}],"message":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"properties":{},"ruleId":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"},{"fingerprints":{"matchBasedId/v1":"8c490f4cf13edd9944ce978193aafc331aeec2b9545b1f1c32fa30ce494593df2a0ce8cd99d111beea77931c7332e0527aa254e850d0fabcec5498192e9b95fe_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/MultiHttpSecurityConfig.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":112,"snippet":{"text":"            http\n                    .antMatcher(\"/api/basic/**\")\n                    .csrf().disable()"},"startColumn":13,"startLine":110}}}],"message":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"properties":{},"ruleId":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"},{"fingerprints":{"matchBasedId/v1":"1725174b95571e1c232e9fbe34175c1fcbf0221d4193389e2480d6836098446ea436b5a3c7bf15ad2c236d32872d3a96865bb809e5f1bb07bd6761c5fd122720_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/MultiHttpSecurityConfig.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":183,"snippet":{"text":"            http.antMatcher(\"/api/okta/**\")\n                    .httpBasic().disable()\n                    .csrf().disable()"},"startColumn":13,"startLine":181}}}],"message":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"properties":{},"ruleId":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/hawk/api/jwt/JwtLog4jController.java:21 to src/main/java/hawk/api/jwt/JwtLog4jController.java:24"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'request.getHeaderNames()' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:21'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/jwt/JwtLog4jController.java"},"region":{"endColumn":63,"endLine":21,"message":{"text":"Source: 'request.getHeaderNames()' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:21'"},"snippet":{"text":"request.getHeaderNames()"},"startColumn":39,"startLine":21}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'headers' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:21'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/jwt/JwtLog4jController.java"},"region":{"endColumn":36,"endLine":21,"message":{"text":"Propagator : 'headers' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:21'"},"snippet":{"text":"headers"},"startColumn":29,"startLine":21}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'it' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:23'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/jwt/JwtLog4jController.java"},"region":{"endColumn":22,"endLine":23,"message":{"text":"Propagator : 'it' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:23'"},"snippet":{"text":"it"},"startColumn":20,"startLine":23}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'logger.info(\"{} = {}\", it, request.getHeader(it));' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:24'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/jwt/JwtLog4jController.java"},"region":{"endColumn":63,"endLine":24,"message":{"text":"Sink: 'logger.info(\"{} = {}\", it, request.getHeader(it));' @ 'src/main/java/hawk/api/jwt/JwtLog4jController.java:24'"},"snippet":{"text":"            logger.info(\"{} = {}\", it, request.getHeader(it));"},"startColumn":13,"startLine":24}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"0d0de662f61bbf8a23cc2bbe1580077b74f2e30614ce15693020dcae4efdeef034bb03e256f99651372f9dc1a92869b93f82e43d04131db5542a55a4ce11407a_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/jwt/JwtLog4jController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":63,"endLine":24,"snippet":{"text":"            logger.info(\"{} = {}\", it, request.getHeader(it));"},"startColumn":13,"startLine":24}}}],"message":{"text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"properties":{},"ruleId":"java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/hawk/api/okta/OktaController.java:18 to src/main/java/hawk/api/okta/OktaController.java:22"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'request.getHeaderNames()' @ 'src/main/java/hawk/api/okta/OktaController.java:18'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/okta/OktaController.java"},"region":{"endColumn":67,"endLine":18,"message":{"text":"Source: 'request.getHeaderNames()' @ 'src/main/java/hawk/api/okta/OktaController.java:18'"},"snippet":{"text":"request.getHeaderNames()"},"startColumn":43,"startLine":18}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'headerNames' @ 'src/main/java/hawk/api/okta/OktaController.java:18'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/okta/OktaController.java"},"region":{"endColumn":40,"endLine":18,"message":{"text":"Propagator : 'headerNames' @ 'src/main/java/hawk/api/okta/OktaController.java:18'"},"snippet":{"text":"headerNames"},"startColumn":29,"startLine":18}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'name' @ 'src/main/java/hawk/api/okta/OktaController.java:20'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/okta/OktaController.java"},"region":{"endColumn":24,"endLine":20,"message":{"text":"Propagator : 'name' @ 'src/main/java/hawk/api/okta/OktaController.java:20'"},"snippet":{"text":"name"},"startColumn":20,"startLine":20}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'System.out.println(name + \": \" + value);' @ 'src/main/java/hawk/api/okta/OktaController.java:22'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/okta/OktaController.java"},"region":{"endColumn":52,"endLine":22,"message":{"text":"Sink: 'System.out.println(name + \": \" + value);' @ 'src/main/java/hawk/api/okta/OktaController.java:22'"},"snippet":{"text":"            System.out.println(name + \": \" + value);"},"startColumn":13,"startLine":22}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"d8e31225c251db04fc3f34cc07e61e8ce56d6abc986d2a02b9027026fb8ece4c0f5ba8c37a66a039aaa2611ecdd60741c2532510ec0220acacb024e76467ba51_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/api/okta/OktaController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":22,"snippet":{"text":"            System.out.println(name + \": \" + value);"},"startColumn":13,"startLine":22}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"b497d9941bb9f64e2fd1b190d2d4e683908dc713bcdb1d4a24856f26ef3712d4e1f9146570c56e7280410251e10415666f317a394a3556e2730b807bcd1327fd_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/LoginController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":60,"endLine":57,"snippet":{"text":"        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));"},"startColumn":9,"startLine":57}}}],"message":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"properties":{},"ruleId":"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"},{"fingerprints":{"matchBasedId/v1":"ba9e5d1fc18e6f18044e08b4b5d8f4aec117648638b21bbeac6475f943e287bae81b7246bd2aa5bf023667d742e18d5c24517539fe8e1d3f52a81cfc4e7f0abf_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/LoginController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":60,"endLine":57,"snippet":{"text":"        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));"},"startColumn":9,"startLine":57}}}],"message":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'"},"properties":{},"ruleId":"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"},{"fingerprints":{"matchBasedId/v1":"32a9c639a672deed13f2b238db8a2f4a34c4331e505713d1242f7c056468266db7aa41a7cf93cc0479dcc7d8aa0c3279aeb166818fe94425cea841f3c7e4e7db_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/LoginController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":60,"endLine":57,"snippet":{"text":"        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));"},"startColumn":9,"startLine":57}}}],"message":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"properties":{},"ruleId":"java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly"},{"fingerprints":{"matchBasedId/v1":"0093520971753776bc6805f81368c825fd2f195fb1f6b6e8845432e450b8a9ee53cb099fbd6c1024c3dc4ca0aadd3c0968a2a5f7856eddc2e9b3592e8509ba26_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/LoginController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":60,"endLine":57,"snippet":{"text":"        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));"},"startColumn":9,"startLine":57}}}],"message":{"text":"The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)"},"properties":{},"ruleId":"java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite"},{"fingerprints":{"matchBasedId/v1":"3d6f518ca26a22e090325fbef02cb2a1c4ab3195a567c3dd8a62ea5a5adcfabe692b6fd9db06480743846f37411ae57fd122b68876449d2cff6420f280b0e778_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/LoginController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":60,"endLine":57,"snippet":{"text":"        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));"},"startColumn":9,"startLine":57}}}],"message":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'"},"properties":{},"ruleId":"java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"},{"fingerprints":{"matchBasedId/v1":"cc3bc1fe8f904f31d7675385616ee0bf824ffece96ae731238403fac747fdd77c8431e272d2122edbfeef90699bb49e667b4b166b9b66eb2ca48df974d91120f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/controller/PayloadController.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":44,"snippet":{"text":"                e.printStackTrace();"},"startColumn":17,"startLine":44}}}],"message":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"properties":{},"ruleId":"java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace"},{"fingerprints":{"matchBasedId/v1":"4eff228850398af0f55014e65cf06e2216e7a78d93100e0ec388a4dcc3dcf25aaedbcc202646d11ce48e371a15dbdb5d4231e86e429ff761362d51cda11c9d08_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":30,"snippet":{"text":"    @RequestMapping(path = \"/message\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":30}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"fingerprints":{"matchBasedId/v1":"c000af17816091698204fb27d7282617ad2b2481ae30bb66a4fba1cb30fb844b1e2a70648628378bb15b2a50a5b94bf4dff68767bf84b56ce8edd0f6bafb5ddb_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":39,"snippet":{"text":"    @RequestMapping(path = \"/message\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":39}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/hawk/new_xxe_secure_defaults.java:41 to src/main/java/hawk/new_xxe_secure_defaults.java:45"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:41'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":41,"message":{"text":"Source: 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:41'"},"snippet":{"text":"file"},"startColumn":73,"startLine":41}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:41'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":41,"message":{"text":"Propagator : 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:41'"},"snippet":{"text":"file"},"startColumn":73,"startLine":41}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'new' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:45'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":21,"endLine":45,"message":{"text":"Propagator : 'new' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:45'"},"snippet":{"text":"new"},"startColumn":18,"startLine":45}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:45'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":40,"endLine":45,"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:45'"},"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":45}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"9be7933851a3a81ddc9377ff864ce6b1b4c40d7f76d67e7798e6be43dd895e1e911b4c777425363e9d5650f9dac63370cf79bc3f424116f265d17236306e91d3_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":45,"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":45}}}],"message":{"text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"properties":{},"ruleId":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring"},{"fingerprints":{"matchBasedId/v1":"c000af17816091698204fb27d7282617ad2b2481ae30bb66a4fba1cb30fb844b1e2a70648628378bb15b2a50a5b94bf4dff68767bf84b56ce8edd0f6bafb5ddb_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":49,"snippet":{"text":"    @RequestMapping(path = \"/message1\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":49}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/hawk/new_xxe_secure_defaults.java:51 to src/main/java/hawk/new_xxe_secure_defaults.java:55"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:51'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":51,"message":{"text":"Source: 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:51'"},"snippet":{"text":"file"},"startColumn":73,"startLine":51}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:51'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":51,"message":{"text":"Propagator : 'file' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:51'"},"snippet":{"text":"file"},"startColumn":73,"startLine":51}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'new' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:55'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":21,"endLine":55,"message":{"text":"Propagator : 'new' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:55'"},"snippet":{"text":"new"},"startColumn":18,"startLine":55}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:55'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java"},"region":{"endColumn":40,"endLine":55,"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/hawk/new_xxe_secure_defaults.java:55'"},"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":55}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"9be7933851a3a81ddc9377ff864ce6b1b4c40d7f76d67e7798e6be43dd895e1e911b4c777425363e9d5650f9dac63370cf79bc3f424116f265d17236306e91d3_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":55,"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":55}}}],"message":{"text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"properties":{},"ruleId":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring"},{"fingerprints":{"matchBasedId/v1":"4eff228850398af0f55014e65cf06e2216e7a78d93100e0ec388a4dcc3dcf25aaedbcc202646d11ce48e371a15dbdb5d4231e86e429ff761362d51cda11c9d08_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/new_xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":60,"snippet":{"text":"    @RequestMapping(path = \"/message\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":60}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/hawk/api/jwt/JwtUserController.java:43 to src/main/java/hawk/service/UserSearchService.java:30"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'text' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:43'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":73,"endLine":43,"message":{"text":"Source: 'text' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:43'"},"snippet":{"text":"text"},"startColumn":69,"startLine":43}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'text' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:43'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":73,"endLine":43,"message":{"text":"Propagator : 'text' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:43'"},"snippet":{"text":"text"},"startColumn":69,"startLine":43}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'search' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:44'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":22,"endLine":44,"message":{"text":"Propagator : 'search' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:44'"},"snippet":{"text":"search"},"startColumn":16,"startLine":44}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'searchText' @ 'src/main/java/hawk/form/Search.java:11'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":36,"endLine":11,"message":{"text":"Propagator : 'searchText' @ 'src/main/java/hawk/form/Search.java:11'"},"snippet":{"text":"searchText"},"startColumn":26,"startLine":11}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'searchText' @ 'src/main/java/hawk/form/Search.java:12'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":24,"endLine":12,"message":{"text":"Propagator : 'searchText' @ 'src/main/java/hawk/form/Search.java:12'"},"snippet":{"text":"searchText"},"startColumn":14,"startLine":12}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'search' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:44'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":22,"endLine":44,"message":{"text":"Propagator : 'search' @ 'src/main/java/hawk/api/jwt/JwtUserController.java:44'"},"snippet":{"text":"search"},"startColumn":16,"startLine":44}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'String query = \"select id, name, description, tenant_id from public.usertb where name like '%\" +\n                    search.getSearchText() + \"%'\";' @ 'src/main/java/hawk/service/UserSearchService.java:30'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java"},"region":{"endColumn":50,"endLine":31,"message":{"text":"Sink: 'String query = \"select id, name, description, tenant_id from public.usertb where name like '%\" +\n                    search.getSearchText() + \"%'\";' @ 'src/main/java/hawk/service/UserSearchService.java:30'"},"snippet":{"text":"            String query = \"select id, name, description, tenant_id from public.usertb where name like '%\" +\n                    search.getSearchText() + \"%'\";"},"startColumn":28,"startLine":30}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"cc5ea2b15465777e32d67e50c87c86abff075fab353d4def863df52a3f1d111c29b86d80f0f90f7fd243732aa46eca421e52ee935ed713ba590329f43080f1d4_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/service/UserSearchService.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":50,"endLine":31,"snippet":{"text":"            String query = \"select id, name, description, tenant_id from public.usertb where name like '%\" +\n                    search.getSearchText() + \"%'\";"},"startColumn":28,"startLine":30}}}],"message":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"properties":{},"ruleId":"java.spring.security.injection.tainted-sql-string.tainted-sql-string"},{"fingerprints":{"matchBasedId/v1":"3130d1a86d8bfc55aac92844b3c8e99b3ac6932df79071f41de53d1bd558b18f45033cb0de5133cc7f4b1a1a1d02dc753ec47eac81697fbab530114d3979d696_0"},"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"src/main/java/hawk/test.java"},"replacements":[{"deletedRegion":{"endColumn":89,"endLine":36,"startColumn":9,"startLine":36},"insertedContent":{"text":"        spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);"}}]}],"description":{"text":"External entities are allowed for spf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n Autofix: Semgrep rule suggested fix"}}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/hawk/test.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":36,"snippet":{"text":"        spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", true);"},"startColumn":9,"startLine":36}}}],"message":{"text":"External entities are allowed for spf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"properties":{},"ruleId":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"},{"fingerprints":{"matchBasedId/v1":"556a542ca338d1c04c1f4652021c359ddf382f5a677169a035ab2fe07cec91dbe7bd00fc37e981a757d693d5840b4001bfa7eed3fa7f9b8cc8b16a394a38080e_0"},"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"src/main/java/n1_xxe_insecure_config.java"},"replacements":[{"deletedRegion":{"endColumn":89,"endLine":20,"startColumn":9,"startLine":20},"insertedContent":{"text":"        dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);"}}]}],"description":{"text":"External entities are allowed for dbf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n Autofix: Semgrep rule suggested fix"}}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/n1_xxe_insecure_config.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":20,"snippet":{"text":"        dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", true);"},"startColumn":9,"startLine":20}}}],"message":{"text":"External entities are allowed for dbf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"properties":{},"ruleId":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"},{"fingerprints":{"matchBasedId/v1":"455a78a8ba92cb2c186fc89f122da86496faff6c7175a881b5bde187fc33c943733901056a10854594b8124b6cdfc464303cf2314cf1999e1297eb5a1184d8ac_0"},"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"src/main/java/xxe_insecure_config.java"},"replacements":[{"deletedRegion":{"endColumn":89,"endLine":11,"startColumn":9,"startLine":11},"insertedContent":{"text":"        dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);"}}]}],"description":{"text":"External entities are allowed for dbf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n Autofix: Semgrep rule suggested fix"}}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_insecure_config.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":11,"snippet":{"text":"        dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", true);"},"startColumn":9,"startLine":11}}}],"message":{"text":"External entities are allowed for dbf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"properties":{},"ruleId":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"},{"fingerprints":{"matchBasedId/v1":"8f0e6476decdb8f5024a3cf0cfbdc918c45592c03daa3cf44b0a4a845ff487b070ca381709c9a608d9bd5ff47f95bd6b8c3f5cee5a683a09d0719f169bd9441f_0"},"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"src/main/java/xxe_insecure_config.java"},"replacements":[{"deletedRegion":{"endColumn":89,"endLine":19,"startColumn":9,"startLine":19},"insertedContent":{"text":"        spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);"}}]}],"description":{"text":"External entities are allowed for spf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n Autofix: Semgrep rule suggested fix"}}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_insecure_config.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":19,"snippet":{"text":"        spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", true);"},"startColumn":9,"startLine":19}}}],"message":{"text":"External entities are allowed for spf. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"properties":{},"ruleId":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"},{"fingerprints":{"matchBasedId/v1":"9f1ce83297df15e36da75ae5c6a1143af6d11db4830e1997b90ff56702daf9a80996acc0d13826513cc97c936af1b347df6d6fc4215797a1e9a9a96db005542d_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":30,"snippet":{"text":"    @RequestMapping(path = \"/message\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":30}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/xxe_secure_defaults.java:34 to src/main/java/xxe_secure_defaults.java:35"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'DocumentBuilderFactory.newInstance()' @ 'src/main/java/xxe_secure_defaults.java:34'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":66,"endLine":34,"message":{"text":"Source: 'DocumentBuilderFactory.newInstance()' @ 'src/main/java/xxe_secure_defaults.java:34'"},"snippet":{"text":"DocumentBuilderFactory.newInstance()"},"startColumn":30,"startLine":34}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'db' @ 'src/main/java/xxe_secure_defaults.java:34'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":27,"endLine":34,"message":{"text":"Propagator : 'db' @ 'src/main/java/xxe_secure_defaults.java:34'"},"snippet":{"text":"db"},"startColumn":25,"startLine":34}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/xxe_secure_defaults.java:35'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":40,"endLine":35,"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/xxe_secure_defaults.java:35'"},"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":35}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"6f622b0024e5b0ff34bc0ab0fe334f699bc4a9b8a05dac2665f79436f0e58bdadfb35e06b899913c4b7ea88067f78dc44d5dcf3632ac92fe45aca2206992d484_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":35,"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":35}}}],"message":{"text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"properties":{},"ruleId":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring"},{"fingerprints":{"matchBasedId/v1":"b81ad5c1afd92e81d21b613cfa556c8e2486fc24dc419f52629d324b967183c478c4ba39d1d2eb8941d5f4e695873e31cddd1f208ebe06a347c4e645778ec93c_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":39,"snippet":{"text":"    @RequestMapping(path = \"/message\", produces = MediaType.TEXT_PLAIN_VALUE)"},"startColumn":6,"startLine":39}}}],"message":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"properties":{},"ruleId":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"},{"codeFlows":[{"message":{"text":"Untrusted dataflow from src/main/java/xxe_secure_defaults.java:41 to src/main/java/xxe_secure_defaults.java:45"},"threadFlows":[{"locations":[{"location":{"message":{"text":"Source: 'file' @ 'src/main/java/xxe_secure_defaults.java:41'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":41,"message":{"text":"Source: 'file' @ 'src/main/java/xxe_secure_defaults.java:41'"},"snippet":{"text":"file"},"startColumn":73,"startLine":41}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'file' @ 'src/main/java/xxe_secure_defaults.java:41'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":77,"endLine":41,"message":{"text":"Propagator : 'file' @ 'src/main/java/xxe_secure_defaults.java:41'"},"snippet":{"text":"file"},"startColumn":73,"startLine":41}}},"nestingLevel":0},{"location":{"message":{"text":"Propagator : 'new' @ 'src/main/java/xxe_secure_defaults.java:45'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":21,"endLine":45,"message":{"text":"Propagator : 'new' @ 'src/main/java/xxe_secure_defaults.java:45'"},"snippet":{"text":"new"},"startColumn":18,"startLine":45}}},"nestingLevel":0},{"location":{"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/xxe_secure_defaults.java:45'"},"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java"},"region":{"endColumn":40,"endLine":45,"message":{"text":"Sink: 'db.parse(new InputSource(file));' @ 'src/main/java/xxe_secure_defaults.java:45'"},"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":45}}},"nestingLevel":1}]}]}],"fingerprints":{"matchBasedId/v1":"6f622b0024e5b0ff34bc0ab0fe334f699bc4a9b8a05dac2665f79436f0e58bdadfb35e06b899913c4b7ea88067f78dc44d5dcf3632ac92fe45aca2206992d484_1"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/xxe_secure_defaults.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":45,"snippet":{"text":"        db.parse(new InputSource(file));"},"startColumn":9,"startLine":45}}}],"message":{"text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"properties":{},"ruleId":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring"},{"fingerprints":{"matchBasedId/v1":"748e940d5272b9f00493f8665c3b578b8499d149be1da2920b384817a13ecdc9ccd88d6f20485d89ab859af781dc4f68ee7c982207867f389b4242b58f05a0d6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/keyStore.pem","uriBaseId":"%SRCROOT%"},"region":{"endColumn":59,"endLine":6,"snippet":{"text":"-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCzhWraqN+mJQuJ"},"startColumn":1,"startLine":5}}}],"message":{"text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"properties":{},"ruleId":"generic.secrets.security.detected-private-key.detected-private-key"},{"fingerprints":{"matchBasedId/v1":"56e6622b87cd67e8cf2a70b6a9cfbf5cef39e875f72106908f8784dff44e779afa7c431d189456d0e2ee326ad2bcf8038f3278b99b55b66045b75c62db05dac6_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/templates/general.html","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":32,"snippet":{"text":"            <form th:action=\"@{/logout}\" method=\"post\" class=\"float-right\" sec:authorize=\"isAuthenticated()\">\n                <button type=\"submit\" class=\"btn btn-primary\">Sign Out</button>\n            </form>"},"startColumn":13,"startLine":30}}}],"message":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"properties":{},"ruleId":"python.django.security.django-no-csrf-token.django-no-csrf-token"},{"fingerprints":{"matchBasedId/v1":"eaaddc652abcdfd8d7edf3f9c551ddae9b99bdce1293c5e60e2f1b1887e1b23e0ff4a460bedc66037c17fd8a58fa9702f0669b98e48decfba400819401958912_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/templates/login-form-multi.html","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":33,"snippet":{"text":"            <form th:action=\"@{/login-form-multi}\" method=\"post\">\n                <input type=\"hidden\" th:value=\"${loginCode}\" id=\"loginCode\" name=\"loginCode\">\n                <div class=\"form-group\">\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" class=\"form-control\" name=\"username\" id=\"username\"\n                           aria-describedby=\"usernameHelp\"\n                           placeholder=\"Enter Username\">\n                    <small id=\"usernameHelp\" class=\"form-text text-muted\">The username of your search account.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"remember\">Remember Me</label>\n                    <input type=\"checkbox\" class=\"form-control\" id=\"remember\" name=\"remember\" placeholder=\"Remember Me\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n            </form>"},"startColumn":13,"startLine":15}}}],"message":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"properties":{},"ruleId":"python.django.security.django-no-csrf-token.django-no-csrf-token"},{"fingerprints":{"matchBasedId/v1":"de7ea1bb2459216f6d0533d0228ef53a4a36fb0f267279e51f200ea22cfe33f410257f5b1136bc236df266495acecde2b1d851f83a43cceb5543f59bc3e90392_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/templates/login.html","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":28,"snippet":{"text":"            <form th:action=\"@{/login}\" method=\"post\">\n                <div class=\"form-group\">\n                    <label for=\"username\">Username</label>\n                    <input type=\"text\" class=\"form-control\" name=\"username\" id=\"username\"\n                           aria-describedby=\"usernameHelp\"\n                           placeholder=\"Enter Username\">\n                    <small id=\"usernameHelp\" class=\"form-text text-muted\">The username of your search account.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n            </form>"},"startColumn":13,"startLine":15}}}],"message":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"properties":{},"ruleId":"python.django.security.django-no-csrf-token.django-no-csrf-token"},{"fingerprints":{"matchBasedId/v1":"5417172840bbda450fa5594f076f1980ec3c3af27ddcdef07ad4de230a7c152c48303349ffdcbaee8fb9e472f7096f0ece794a58d41e0980a5357237b485142f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/templates/search.html","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":20,"snippet":{"text":"            <form th:action=\"@{/search}\" th:object=\"${search}\" method=\"post\" class=\"float-left\">\n                <div class=\"form-group\">\n                    <label for=\"search\">Find Items</label>\n                    <input th:field=\"*{searchText}\" type=\"text\" class=\"form-control\" id=\"search\" name=\"search\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">Search</button>\n            </form>"},"startColumn":13,"startLine":14}}}],"message":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"properties":{},"ruleId":"python.django.security.django-no-csrf-token.django-no-csrf-token"},{"fingerprints":{"matchBasedId/v1":"3a57d11b3400cd26337515a7d9ca59aa9433a7cea8098b60d9ba9833e92a67cf986399104d0e96a24ef5c7d5e713368f9c993a34ca952a1c2c846ebc5758a14f_0"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/resources/templates/user-search.html","uriBaseId":"%SRCROOT%"},"region":{"endColumn":20,"endLine":20,"snippet":{"text":"            <form th:action=\"@{/admin/search}\" th:object=\"${search}\" method=\"post\" class=\"float-left\">\n                <div class=\"form-group\">\n                    <label for=\"search\">Find Users</label>\n                    <input th:field=\"*{searchText}\" type=\"text\" class=\"form-control\" id=\"search\" name=\"search\">\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">Search</button>\n            </form>"},"startColumn":13,"startLine":14}}}],"message":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"properties":{},"ruleId":"python.django.security.django-no-csrf-token.django-no-csrf-token"}],"tool":{"driver":{"name":"Semgrep PRO","rules":[{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"help":{"markdown":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/dockerfile.security.missing-user.missing-user)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."},"helpUri":"https://semgrep.dev/r/dockerfile.security.missing-user.missing-user","id":"dockerfile.security.missing-user.missing-user","name":"dockerfile.security.missing-user.missing-user","properties":{"precision":"very-high","tags":["CWE-250: Execution with Unnecessary Privileges","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: dockerfile.security.missing-user.missing-user"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"help":{"markdown":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file."},"helpUri":"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key","id":"generic.secrets.security.detected-private-key.detected-private-key","name":"generic.secrets.security.detected-private-key.detected-private-key","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","LOW CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: generic.secrets.security.detected-private-key.detected-private-key"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"help":{"markdown":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace)\n - [https://cwe.mitre.org/data/definitions/489.html](https://cwe.mitre.org/data/definitions/489.html)\n - [https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/](https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/)\n - [https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces)\n - [https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure](https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure)\n","text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace","id":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace","name":"java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","OWASP-A10:2004 - Insecure Configuration Management","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"help":{"markdown":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace)\n - [https://cwe.mitre.org/data/definitions/489.html](https://cwe.mitre.org/data/definitions/489.html)\n - [https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/](https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/)\n - [https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces)\n - [https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure](https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure)\n","text":"Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information."},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace","id":"java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace","name":"java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace","properties":{"precision":"very-high","tags":["CWE-489: Active Debug Code","MEDIUM CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","OWASP-A10:2004 - Insecure Configuration Management","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"help":{"markdown":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","id":"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","name":"java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"help":{"markdown":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n","text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","id":"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","name":"java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"help":{"markdown":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer)\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n","text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","id":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","name":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n","text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","id":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","name":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","rule-board-pr-comments","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"help":{"markdown":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly)\n - [https://owasp.org/www-community/HttpOnly](https://owasp.org/www-community/HttpOnly)\n","text":"A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'"},"helpUri":"https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly","id":"java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly","name":"java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly","properties":{"precision":"very-high","tags":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)"},"help":{"markdown":"The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite)\n - [https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application](https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application)\n","text":"The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)"},"helpUri":"https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite","id":"java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite","name":"java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"help":{"markdown":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag)\n - [https://owasp.org/www-community/controls/SecureCookieAttribute](https://owasp.org/www-community/controls/SecureCookieAttribute)\n","text":"A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'"},"helpUri":"https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","id":"java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","name":"java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag","properties":{"precision":"very-high","tags":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","HIGH CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"help":{"markdown":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep)\n - [https://cwe.mitre.org/data/definitions/117.html](https://cwe.mitre.org/data/definitions/117.html)\n - [https://cwe.mitre.org/data/definitions/93.html](https://cwe.mitre.org/data/definitions/93.html)\n - [https://owasp.org/www-community/attacks/Log_Injection](https://owasp.org/www-community/attacks/Log_Injection)\n","text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"helpUri":"https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep","id":"java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep","name":"java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep","properties":{"precision":"very-high","tags":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"CSRF protection is disabled for this configuration. This is a security risk."},"help":{"markdown":"CSRF protection is disabled for this configuration. This is a security risk.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"CSRF protection is disabled for this configuration. This is a security risk."},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","id":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","name":"java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string)\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","name":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-sql-string.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"help":{"markdown":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping)\n - [https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING](https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING)\n","text":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."},"helpUri":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","name":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","LOW CONFIDENCE","OWASP-A01:2021 - Broken Access Control","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"help":{"markdown":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring)\n - [https://blog.sonarsource.com/secure-xml-processor/](https://blog.sonarsource.com/secure-xml-processor/)\n - [https://blog.sonarsource.com/understanding-xxe-vulnerabilities/](https://blog.sonarsource.com/understanding-xxe-vulnerabilities/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n - [https://cwe.mitre.org/data/definitions/611.html](https://cwe.mitre.org/data/definitions/611.html)\n - [https://cwe.mitre.org/data/definitions/776.html](https://cwe.mitre.org/data/definitions/776.html)\n - [https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E](https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E)\n - [https://github.com/semgrep/java-xxe-research](https://github.com/semgrep/java-xxe-research)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n - [https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755](https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755)\n","text":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) or XIncludes which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. It is our recommendation to secure this parser against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl, true)`. Alternatively, the following configurations also provide protection against XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\")`, or enabling both `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false)` and `factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)"},"helpUri":"https://semgrep.dev/r/java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring","id":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring","name":"java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","rule-board-pr-comments","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"help":{"markdown":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token)\n - [https://docs.djangoproject.com/en/4.2/howto/csrf/](https://docs.djangoproject.com/en/4.2/howto/csrf/)\n","text":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks."},"helpUri":"https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token","id":"python.django.security.django-no-csrf-token.django-no-csrf-token","name":"python.django.security.django-no-csrf-token.django-no-csrf-token","properties":{"precision":"very-high","tags":["CWE-352: Cross-Site Request Forgery (CSRF)","MEDIUM CONFIDENCE","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: python.django.security.django-no-csrf-token.django-no-csrf-token"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"help":{"markdown":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges)\n - [https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/](https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n","text":"Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this."},"helpUri":"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges","id":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","name":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: yaml.docker-compose.security.no-new-privileges.no-new-privileges"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"help":{"markdown":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service)\n - [https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir](https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir)\n - [https://blog.atomist.com/security-of-docker-kubernetes/](https://blog.atomist.com/security-of-docker-kubernetes/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only)\n","text":"Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this."},"helpUri":"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","id":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","name":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","properties":{"precision":"very-high","tags":["CWE-732: Incorrect Permission Assignment for Critical Resource","LOW CONFIDENCE","OWASP-A05:2021 - Security Misconfiguration","OWASP-A06:2017 - Security Misconfiguration","rule-board-audit","security"]},"shortDescription":{"text":"Semgrep Finding: yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service"}}],"semanticVersion":"1.131.0"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}